---
import * as Sentry from "@sentry/astro";
import { getEntry } from "astro:content";
import Layout from "../../../../layouts/Layout.astro";
import { API_URL_TICKETS, API_HEADERS_TICKETS } from "../../../../constants";
import TicketNotConfirmed from "../../../../sections/TicketNotConfirmed.astro";
import TicketSuccess from "../../../../sections/TicketSuccess.astro";

export const prerender = false;

const { eventId, ticketId } = Astro.params;
if (!eventId || !ticketId) {
  Sentry.captureMessage("Access non-existing event.");
  return Astro.redirect("/404");
}

const entry = await getEntry("events", eventId);
if (entry === undefined) {
  Sentry.captureMessage("Access non-existing event.");
  return Astro.redirect("/404");
}

let ticketConfirmed = false;
let ticketName = "";
let ticketEmail = "";
let ticketTimestamp = "";

try {
  const response = await fetch(`${API_URL_TICKETS}/${eventId}/${ticketId}`, {
    ...API_HEADERS_TICKETS,
  });

  if (!response.ok) {
    throw new Error("Ticket doesn't exist.");
  }

  const responseJson:
    | {
        status: "success";
        statusCode: number;
        data: {
          key: ["nn1-dev-tickets", number, string];
          value: {
            timestamp: string;
            eventId: number;
            name: string;
            email: string;
            confirmed: boolean;
          };
          versionstamp: string;
        };
        error: null;
      }
    | { status: "error"; statusCode: number; data: null; error: string } =
    await response.json();

  if (responseJson.status === "error") {
    throw new Error("Ticket doesn't exist.");
  }

  ticketTimestamp = responseJson.data.value.timestamp;

  if (responseJson.data.value.confirmed) {
    ticketConfirmed = true;
    ticketName = responseJson.data.value.name;
    ticketEmail = responseJson.data.value.email;

    // no cache in the browser
    Astro.response.headers.set(
      "Cache-Control",
      "public, max-age=0, must-revalidate",
    );

    // cnd cache for a week
    // serve stale up to a month
    Astro.response.headers.set(
      "Netlify-CDN-Cache-Control",
      "public, durable, s-maxage=604800, stale-while-revalidate=2629746",
    );
  }
} catch (error) {
  Sentry.captureException(error);
  return Astro.redirect("/404");
}

const {
  data: { id, name, description, location, dateStart, dateEnd },
} = entry;
---

<Layout title={`${name} | NN1 Dev Club`} description={description} noIndex>
  {
    ticketConfirmed ? (
      <TicketSuccess
        eventId={id}
        eventName={name}
        eventDescription={description}
        eventLocation={location}
        eventDateStart={dateStart}
        eventDateEnd={dateEnd}
        ticketId={ticketId}
        ticketName={ticketName}
        ticketEmail={ticketEmail}
      />
    ) : (
      <TicketNotConfirmed id={id} timestamp={ticketTimestamp} />
    )
  }
</Layout>
